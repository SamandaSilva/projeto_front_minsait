{"ast":null,"code":"import { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"myChart\"];\nexport class HomeComponent {\n  constructor() {\n    this.produtos = []; // Suponha que você tenha uma lista de produtos\n  }\n  // Método para criar o gráfico\n  createChart() {\n    const canvas = this.myChart.nativeElement;\n    const ctx = canvas.getContext('2d');\n    // Mapeie seus produtos para os rótulos (labels) e valores do gráfico\n    const labels = this.produtos.map(produto => produto.nome);\n    const data = this.produtos.map(produto => produto.preco);\n    const chart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Preços dos Produtos',\n          data: data,\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n  ngOnInit() {\n    this.createChart();\n  }\n  static #_ = this.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    viewQuery: function HomeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n      }\n    },\n    decls: 10,\n    vars: 0,\n    consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [\"id\", \"myChart\", \"width\", \"400\", \"height\", \"200\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n        i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2);\n        i0.ɵɵelementStart(4, \"title\");\n        i0.ɵɵtext(5, \"Gr\\u00E1fico de Produtos\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"body\")(7, \"h1\");\n        i0.ɵɵtext(8, \"Gr\\u00E1fico de Pre\\u00E7os de Produtos\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"canvas\", 3);\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Chart","HomeComponent","constructor","produtos","createChart","canvas","myChart","nativeElement","ctx","getContext","labels","map","produto","nome","data","preco","chart","type","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","ngOnInit","_","_2","selectors","viewQuery","HomeComponent_Query","rf","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\RanyAmanda\\eclipse-workspace\\Projeto-minsait\\front\\projeto_front\\src\\app\\pages\\home\\home.component.ts","C:\\Users\\RanyAmanda\\eclipse-workspace\\Projeto-minsait\\front\\projeto_front\\src\\app\\pages\\home\\home.component.html"],"sourcesContent":["import { Component, ElementRef, ViewChild, OnInit } from '@angular/core';\nimport { Chart } from 'chart.js';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  @ViewChild('myChart') myChart: ElementRef;\n  produtos: Ipr = []; // Suponha que você tenha uma lista de produtos\n\n  // Método para criar o gráfico\n  createChart() {\n    const canvas: HTMLCanvasElement = this.myChart.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    // Mapeie seus produtos para os rótulos (labels) e valores do gráfico\n    const labels = this.produtos.map(produto => produto.nome);\n    const data = this.produtos.map(produto => produto.preco);\n\n    const chart = new Chart(ctx, {\n      type: 'bar', // Ou outro tipo de gráfico Chart.js\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Preços dos Produtos',\n          data: data,\n          backgroundColor: 'rgba(75, 192, 192, 0.2)', // Cor de fundo das barras\n          borderColor: 'rgba(75, 192, 192, 1)', // Cor da borda das barras\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.createChart();\n  }\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Gráfico de Produtos</title>\n    <!-- Inclua a biblioteca Chart.js -->\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1>Gráfico de Preços de Produtos</h1>\n    <!-- Adicione um elemento canvas para o gráfico -->\n    <canvas id=\"myChart\" width=\"400\" height=\"200\"></canvas>\n\n    <script>\n        // Dados de exemplo (substitua pelos seus dados reais)\n        const produtos = [\n            { nome: 'Produto A', preco: 10 },\n            { nome: 'Produto B', preco: 20 },\n            { nome: 'Produto C', preco: 15 },\n        ];\n\n        // Acesse o elemento canvas\n        const canvas = document.getElementById('myChart');\n        const ctx = canvas.getContext('2d');\n\n        // Mapeie os produtos para os rótulos (labels) e valores do gráfico\n        const labels = produtos.map(produto => produto.nome);\n        const data = produtos.map(produto => produto.preco);\n\n        // Crie o gráfico de barras\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Preços dos Produtos',\n                    data: data,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>\n"],"mappings":"AACA,SAASA,KAAK,QAAQ,UAAU;;;AAQhC,OAAM,MAAOC,aAAa;EAL1BC,YAAA;IAOE,KAAAC,QAAQ,GAAQ,EAAE,CAAC,CAAC;;EAEpB;EACAC,WAAWA,CAAA;IACT,MAAMC,MAAM,GAAsB,IAAI,CAACC,OAAO,CAACC,aAAa;IAC5D,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IAEnC;IACA,MAAMC,MAAM,GAAG,IAAI,CAACP,QAAQ,CAACQ,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;IACzD,MAAMC,IAAI,GAAG,IAAI,CAACX,QAAQ,CAACQ,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACG,KAAK,CAAC;IAExD,MAAMC,KAAK,GAAG,IAAIhB,KAAK,CAACQ,GAAG,EAAE;MAC3BS,IAAI,EAAE,KAAK;MACXH,IAAI,EAAE;QACJJ,MAAM,EAAEA,MAAM;QACdQ,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,qBAAqB;UAC5BL,IAAI,EAAEA,IAAI;UACVM,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;SACd;OACF;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;;;;KAIpB,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACvB,WAAW,EAAE;EACpB;EAAC,QAAAwB,CAAA,G;qBArCU3B,aAAa;EAAA;EAAA,QAAA4B,EAAA,G;UAAb5B,aAAa;IAAA6B,SAAA;IAAAC,SAAA,WAAAC,oBAAAC,EAAA,EAAAzB,GAAA;MAAA,IAAAyB,EAAA;;;;;;;;;;;;;QCR1BC,EAAA,CAAAC,cAAA,cAAgB;QAEZD,EAAA,CAAAE,SAAA,cAAsB;QAEtBF,EAAA,CAAAC,cAAA,YAAO;QAAAD,EAAA,CAAAG,MAAA,+BAAmB;QAAAH,EAAA,CAAAI,YAAA,EAAQ;QAItCJ,EAAA,CAAAC,cAAA,WAAM;QACED,EAAA,CAAAG,MAAA,8CAA6B;QAAAH,EAAA,CAAAI,YAAA,EAAK;QAEtCJ,EAAA,CAAAE,SAAA,gBAAuD;QAwC3DF,EAAA,CAAAI,YAAA,EAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}