{"ast":null,"code":"import { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"produtos\"];\nexport class HomeComponent {\n  constructor() {\n    this.produto = [];\n  }\n  createChart() {\n    const canvas = this.myChart.nativeElement;\n    const ctx = canvas.getContext('2d');\n    // Mapeie seus produtos para os rótulos (labels) e valores do gráfico\n    const labels = this.produto.map(produto => produto.nome);\n    const data = thisproduto.map(produto => produto.preco);\n    const chart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Preços dos Produtos',\n          data: data,\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n  // Método que será chamado após a visualização do componente\n  ngAfterViewInit() {\n    this.createChart();\n  }\n  static #_ = this.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    viewQuery: function HomeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[\"myChart\", \"\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", null, 0);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Chart","HomeComponent","constructor","produto","createChart","canvas","myChart","nativeElement","ctx","getContext","labels","map","nome","data","thisproduto","preco","chart","type","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","ngAfterViewInit","_","_2","selectors","viewQuery","HomeComponent_Query","rf","i0","ɵɵelement"],"sources":["C:\\Users\\RanyAmanda\\eclipse-workspace\\Projeto-minsait\\front\\projeto_front\\src\\app\\pages\\home\\home.component.ts","C:\\Users\\RanyAmanda\\eclipse-workspace\\Projeto-minsait\\front\\projeto_front\\src\\app\\pages\\home\\home.component.html"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { Chart } from 'chart.js';\nimport { Observable } from 'rxjs';\nimport { IProdutos } from 'src/app/interfaces/produtos';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n  @ViewChild('produtos') myChart!: ElementRef;\n  produto: IProdutos[] = [];\n\n  createChart() {\n    const canvas: HTMLCanvasElement = this.myChart.nativeElement;\n    const ctx = canvas.getContext('2d');\n\n    // Mapeie seus produtos para os rótulos (labels) e valores do gráfico\n    const labels =this.produto.map(produto => produto.nome);\n    const data = thisproduto.map(produto => produto.preco);\n\n    const chart = new Chart(ctx, {\n      type: 'bar', // Ou outro tipo de gráfico Chart.js\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Preços dos Produtos',\n          data: data,\n          backgroundColor: 'rgba(75, 192, 192, 0.2)', // Cor de fundo das barras\n          borderColor: 'rgba(75, 192, 192, 1)', // Cor da borda das barras\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n\n  // Método que será chamado após a visualização do componente\n  ngAfterViewInit() {\n    this.createChart();\n  }\n}\n\n","<canvas #myChart ></canvas>\n\n"],"mappings":"AACA,SAASA,KAAK,QAAQ,UAAU;;;AAUhC,OAAM,MAAOC,aAAa;EAL1BC,YAAA;IAOE,KAAAC,OAAO,GAAgB,EAAE;;EAEzBC,WAAWA,CAAA;IACT,MAAMC,MAAM,GAAsB,IAAI,CAACC,OAAO,CAACC,aAAa;IAC5D,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IAEnC;IACA,MAAMC,MAAM,GAAE,IAAI,CAACP,OAAO,CAACQ,GAAG,CAACR,OAAO,IAAIA,OAAO,CAACS,IAAI,CAAC;IACvD,MAAMC,IAAI,GAAGC,WAAW,CAACH,GAAG,CAACR,OAAO,IAAIA,OAAO,CAACY,KAAK,CAAC;IAEtD,MAAMC,KAAK,GAAG,IAAIhB,KAAK,CAACQ,GAAG,EAAE;MAC3BS,IAAI,EAAE,KAAK;MACXJ,IAAI,EAAE;QACJH,MAAM,EAAEA,MAAM;QACdQ,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,qBAAqB;UAC5BN,IAAI,EAAEA,IAAI;UACVO,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;SACd;OACF;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;;;;KAIpB,CAAC;EACJ;EAEA;EACAC,eAAeA,CAAA;IACb,IAAI,CAACvB,WAAW,EAAE;EACpB;EAAC,QAAAwB,CAAA,G;qBArCU3B,aAAa;EAAA;EAAA,QAAA4B,EAAA,G;UAAb5B,aAAa;IAAA6B,SAAA;IAAAC,SAAA,WAAAC,oBAAAC,EAAA,EAAAzB,GAAA;MAAA,IAAAyB,EAAA;;;;;;;;;;;;;QCX1BC,EAAA,CAAAC,SAAA,sBAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}